# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tk7ShBYOL6YtaIB3W8L-kfqQHuBf3Ew1
"""

from cryptography import x509
from cryptography.x509.oid import NameOID
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa
import datetime

# Generate a private key
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048
)

# Define the subject (certificate owner) with Greek characters
subject = x509.Name([
    x509.NameAttribute(NameOID.COUNTRY_NAME, "GR"),
    x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, "Αττική"),
    x509.NameAttribute(NameOID.LOCALITY_NAME, "Αθήνα"),
    x509.NameAttribute(NameOID.ORGANIZATION_NAME, "Οργανισμός Παραδείγματος"),
    x509.NameAttribute(NameOID.COMMON_NAME, "Παράδειγμα Πιστοποιητικού")
])

# Define the issuer (for self-signed, it's the same as the subject)
issuer = subject

# Set certificate validity period
one_day = datetime.timedelta(days=1)
builder = x509.CertificateBuilder() \
    .subject_name(subject) \
    .issuer_name(issuer) \
    .public_key(private_key.public_key()) \
    .serial_number(x509.random_serial_number()) \
    .not_valid_before(datetime.datetime.now(datetime.timezone.utc)) \
    .not_valid_after(datetime.datetime.now(datetime.timezone.utc) + (365 * one_day))

# Add a basic X.509v3 extension (e.g., Basic Constraints)
builder = builder.add_extension(
    x509.BasicConstraints(ca=True, path_length=None), critical=True,
)

# Sign the certificate
certificate = builder.sign(private_key, hashes.SHA256())

# Serialize the certificate and private key to PEM format
pem_certificate = certificate.public_bytes(serialization.Encoding.PEM)
pem_private_key = private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.PKCS8,
    encryption_algorithm=serialization.NoEncryption()
)

print("PEM Certificate:")
print(pem_certificate.decode())

print("\nPEM Private Key:")
print(pem_private_key.decode())



