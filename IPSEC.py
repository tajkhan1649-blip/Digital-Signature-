# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tk7ShBYOL6YtaIB3W8L-kfqQHuBf3Ew1
"""

# Install necessary libraries (run this in a Colab cell)
!pip install cryptography
!pip install pycryptodome

# Import libraries
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import hashes, hmac
import os
import base64

# -----------------------------
# Step 1: Prepare the message
# -----------------------------
message = "Αυτή είναι μια δοκιμή"  # Greek text
encoded_message = message.encode('utf-8')

# -----------------------------
# Step 2: Generate key & IV
# -----------------------------
key = os.urandom(16)  # 128-bit AES key
iv = os.urandom(16)   # 16-byte Initialization Vector

print("AES Key:", base64.b64encode(key).decode())
print("IV:", base64.b64encode(iv).decode())

# -----------------------------
# Step 3: Encrypt (ESP-like)
# -----------------------------
cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
encryptor = cipher.encryptor()

# Padding to multiple of block size
from Crypto.Util.Padding import pad, unpad
ciphertext = encryptor.update(pad(encoded_message, 16)) + encryptor.finalize()
ciphertext_b64 = base64.b64encode(ciphertext).decode()
print("Ciphertext (Base64):", ciphertext_b64)

# -----------------------------
# Step 4: HMAC for integrity (AH-like)
# -----------------------------
h = hmac.HMAC(key, hashes.SHA256())
h.update(ciphertext)
auth_tag = h.finalize()
auth_tag_b64 = base64.b64encode(auth_tag).decode()
print("Authentication Tag (Base64):", auth_tag_b64)

# -----------------------------
# Step 5: Decrypt and verify
# -----------------------------
# Verify HMAC first
h2 = hmac.HMAC(key, hashes.SHA256())
h2.update(ciphertext)
try:
    h2.verify(auth_tag)
    print("HMAC Verified ✅")

    # Decrypt
    decryptor = Cipher(algorithms.AES(key), modes.CBC(iv)).decryptor()
    decrypted_padded = decryptor.update(ciphertext) + decryptor.finalize()
    decrypted_message = unpad(decrypted_padded, 16).decode('utf-8')
    print("Decrypted Message:", decrypted_message)
except Exception as e:
    print("HMAC Verification Failed ❌:", e)

